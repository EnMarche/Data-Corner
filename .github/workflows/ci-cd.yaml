name: Continuous Integration & Deployment

on:
    push:
        branches: [ master ]
    pull_request:
    release:
        types: [ published ]

jobs:
    Build:
        name: Build app
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Restore node_modules from cache
                uses: actions/cache@v2
                with:
                    path: '**/node_modules'
                    key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-node-modules-

            -   name: Install deps
                run: yarn

    Tests:
        name: Test app
        runs-on: ubuntu-latest
        needs: [ Build ]

        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Restore node_modules from cache
                uses: actions/cache@v2
                with:
                    path: '**/node_modules'
                    key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-node-modules-

            -   name: Install deps
                run: yarn

            -   name: Run linter
                run: yarn lint

            -   name: Run tests
                run: yarn test

    BuildImageStaging:
        name: Build image STAGING üçæ
        runs-on: ubuntu-latest
        needs: [ Tests ]
        environment: staging
        if: github.event.ref == 'refs/heads/master'

        steps:
            -   name: Checkout
                uses: actions/checkout@v2
                with:
                    ref: ${{ github.event.workflow_run.head_branch }}

            -   name: Set up Cloud credentials
                uses: google-github-actions/setup-gcloud@master
                with:
                    project_id: ${{ secrets.GCP_PROJECT_ID }}
                    service_account_key: ${{ secrets.GCP_SA_KEY }}
                    export_default_credentials: true

            -   name: Set Env
                env:
                    ENV_1: REACT_APP_OAUTH_HOST
                    ENV_2: REACT_APP_OAUTH_CLIENT_ID
                    ENV_3: REACT_APP_INTERNAL_APP_ID
                    ENV_4: REACT_APP_SENTRY_DSN
                    ENV_5: REACT_APP_UNLAYER_PROJECT_ID
                    ENV_6: REACT_APP_MAPBOX
                    ENV_7: DEEP
                    ENV_8: IA_KEY
                run: |-
                    echo "" > .env.production
                    echo "${{ env.ENV_1 }}=${{ secrets[env.ENV_1] }}" >> .env.production
                    echo "${{ env.ENV_2 }}=${{ secrets[env.ENV_2] }}" >> .env.production
                    echo "${{ env.ENV_3 }}=${{ secrets[env.ENV_3] }}" >> .env.production
                    echo "${{ env.ENV_4 }}=${{ secrets[env.ENV_4] }}" >> .env.production
                    echo "${{ env.ENV_5 }}=${{ secrets[env.ENV_5] }}" >> .env.production
                    echo "${{ env.ENV_6 }}=${{ secrets[env.ENV_6] }}" >> .env.production
                    echo "${{ env.ENV_7 }}=${{ secrets[env.ENV_7] }}" >> .env.production
                    echo "${{ env.ENV_8 }}=${{ secrets[env.ENV_8] }}" >> .env.production
                    echo "${{ env.ENV_9 }}=${{ secrets[env.ENV_9] }}" >> .env.production

                    echo "REACT_APP_VERSION=${GITHUB_SHA::7}" >> .env.production

            -   name: Build & Publish
                run: |-
                    gcloud --quiet auth configure-docker

                    docker build \
                        --tag "eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_NAME }}:${{ github.sha }}" \
                        --tag "eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_NAME }}:latest" \
                        .

                    docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_NAME }} --all-tags

    BuildImageProduction:
        name: Build image PRODUCTION üöÄ
        runs-on: ubuntu-latest
        needs: [ Tests ]
        environment: production
        if: github.event_name == 'release'

        steps:
            -   name: Checkout
                uses: actions/checkout@v2
                with:
                    ref: ${{ github.event.workflow_run.head_branch }}

            -   name: Set up Cloud credentials
                uses: google-github-actions/setup-gcloud@master
                with:
                    project_id: ${{ secrets.GCP_PROJECT_ID }}
                    service_account_key: ${{ secrets.GCP_SA_KEY }}
                    export_default_credentials: true

            -   name: Set Env
                env:
                    ENV_1: REACT_APP_OAUTH_HOST
                    ENV_2: REACT_APP_OAUTH_CLIENT_ID
                    ENV_3: REACT_APP_INTERNAL_APP_ID
                    ENV_4: REACT_APP_SENTRY_DSN
                    ENV_5: REACT_APP_UNLAYER_PROJECT_ID
                    ENV_6: REACT_APP_MAPBOX
                    ENV_7: DEEP
                    ENV_8: IA_KEY
                run: |-
                    echo "" > .env.production
                    echo "${{ env.ENV_1 }}=${{ secrets[env.ENV_1] }}" >> .env.production
                    echo "${{ env.ENV_2 }}=${{ secrets[env.ENV_2] }}" >> .env.production
                    echo "${{ env.ENV_3 }}=${{ secrets[env.ENV_3] }}" >> .env.production
                    echo "${{ env.ENV_4 }}=${{ secrets[env.ENV_4] }}" >> .env.production
                    echo "${{ env.ENV_5 }}=${{ secrets[env.ENV_5] }}" >> .env.production
                    echo "${{ env.ENV_6 }}=${{ secrets[env.ENV_6] }}" >> .env.production
                    echo "${{ env.ENV_7 }}=${{ secrets[env.ENV_7] }}" >> .env.production
                    echo "${{ env.ENV_8 }}=${{ secrets[env.ENV_8] }}" >> .env.production
                    echo "${{ env.ENV_9 }}=${{ secrets[env.ENV_9] }}" >> .env.production

                    echo "REACT_APP_VERSION=${{ github.event.release.tag_name }}" >> .env.production

            -   name: Build & Publish
                run: |-
                    gcloud --quiet auth configure-docker

                    docker build --tag "eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_NAME }}:${{ github.event.release.tag_name }}" .
                    docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_NAME }} --all-tags

    DeployStaging:
        name: Deploy STAGING üçæ
        runs-on: ubuntu-latest
        needs: [ BuildImageStaging ]
        environment: staging

        steps:
            -   name: Deploy to Cloud Run
                uses: google-github-actions/deploy-cloudrun@main
                with:
                    service: ${{ secrets.CLOUD_RUN_NAME }}-staging
                    image: eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_NAME }}:latest
                    credentials: ${{ secrets.GCP_SA_KEY }}
                    region: ${{ secrets.GCP_ZONE }}

    DeployProduction:
        name: Deploy PRODUCTION üöÄ
        runs-on: ubuntu-latest
        needs: [ BuildImageProduction ]
        environment: production

        steps:
            -   name: Deploy to Cloud Run
                uses: google-github-actions/deploy-cloudrun@main
                with:
                    service: ${{ secrets.CLOUD_RUN_NAME }}
                    image: eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_NAME }}:${{ github.event.release.tag_name }}
                    credentials: ${{ secrets.GCP_SA_KEY }}
                    region: ${{ secrets.GCP_ZONE }}
